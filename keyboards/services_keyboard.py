# Sprofy/keyboards/services_keyboard.py
import logging
from typing import Optional  # <-- –ò–º–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏

from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
try:
    from data.cities import CITIES
except ImportError:
    logging.warning(
        "–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ CITIES –≤ data/cities.py. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    )
    CITIES = ["–ö–∏—ó–≤", "–õ—å–≤—ñ–≤", "–û–¥–µ—Å–∞", "–•–∞—Ä–∫—ñ–≤", "–î–Ω—ñ–ø—Ä–æ"]  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

logger = logging.getLogger(__name__)


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ì–æ—Ä–æ–¥–æ–≤ ---
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è -> Optional[InlineKeyboardMarkup]
def create_city_keyboard(
    page: int = 0, cities_per_page: int = 8
) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    if not CITIES:
        logger.warning("–°–ø–∏—Å–æ–∫ CITIES –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return None

    start_index = page * cities_per_page
    end_index = start_index + cities_per_page
    paginated_cities = CITIES[start_index:end_index]

    if not paginated_cities:
        return None

    keyboard = []
    for city in paginated_cities:
        keyboard.append([InlineKeyboardButton(city, callback_data=f"city_{city}")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"citypage_{page - 1}")
        )
    if end_index < len(CITIES):
        nav_buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"citypage_{page + 1}")
        )

    if nav_buttons:
        keyboard.append(nav_buttons)

    return InlineKeyboardMarkup(keyboard)


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –£—Å–ª—É–≥ (–ü–æ–∫–∞ –ó–∞–≥–ª—É—à–∫–∏) ---
def create_service_keyboard(level=1, parent_category=None) -> InlineKeyboardMarkup:
    logger.debug(
        f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É—Å–ª—É–≥: level={level}, parent={parent_category}"
    )
    keyboard = [
        [
            InlineKeyboardButton(
                "üíÖ –ú–∞–Ω—ñ–∫—é—Ä/–ø–µ–¥–∏–∫—é—Ä (–¢–µ—Å—Ç)", callback_data="service_–ú–∞–Ω—ñ–∫—é—Ä"
            )
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_subservice_keyboard(category) -> InlineKeyboardMarkup:
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—É—Å–ª—É–≥ –¥–ª—è {category}")
    keyboard = [
        [
            InlineKeyboardButton(
                "–ü–æ–∫—Ä–∏—Ç—Ç—è –≥–µ–ª—å-–ª–∞–∫ (–¢–µ—Å—Ç)", callback_data="subservice_–ì–µ–ª—å–õ–∞–∫"
            )
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_subsubservice_keyboard(sub_category) -> InlineKeyboardMarkup:
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥-–ø–æ–¥—É—Å–ª—É–≥ –¥–ª—è {sub_category}")
    keyboard = [
        [InlineKeyboardButton("–î–∏–∑–∞–π–Ω (–¢–µ—Å—Ç)", callback_data="subsubservice_–î–∏–∑–∞–π–Ω")]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_comment_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚úçÔ∏è –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", callback_data="skip_comment")],
        [InlineKeyboardButton("üì∏ –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ", callback_data="go_to_photo")],
    ]
    return InlineKeyboardMarkup(keyboard)


def create_photo_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ", callback_data="skip_photo")],
        [InlineKeyboardButton("‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="finish_order")],
    ]
    return InlineKeyboardMarkup(keyboard)
