# handlers/admin.py (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è v3 - Ruff check + noqa F401)

# === BLOCK 1: Imports and Logger ===
import asyncio  # –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ sleep –≤ –∑–∞–≥–ª—É—à–∫–∞—Ö
import csv  # noqa: F401 - –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ handle_instructions_file
import io  # noqa: F401 - –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ handle_instructions_file
import logging
import typing

import telegram  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è telegram.error
import yaml  # –î–ª—è YAML

# –ò–º–ø–æ—Ä—Ç—ã SQLAlchemy –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (I001)
from sqlalchemy import select  # –ò–º–ø–æ—Ä—Ç insert –û–°–¢–ê–í–õ–ï–ù (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º F401)
from sqlalchemy import update as sqlalchemy_update
from sqlalchemy.exc import IntegrityError as SQLAlchemyIntegrityError  # –û—Å—Ç–∞–≤–ª–µ–Ω F401
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from telegram import Update, constants
from telegram.ext import ContextTypes
from yaml import YAMLError  # –î–ª—è –æ—à–∏–±–æ–∫ YAML

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ I001)
from database.models import (
    ConversationScenario,  # –ú–æ–¥–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    Instructions,
    RegistrationCodes,
    UserData,
)


# –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è escape_md
def _escape_md_fallback(text: typing.Optional[typing.Any], **kwargs) -> str:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è escape_md, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
    # –°—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ —Ä–∞–∑–±–∏—Ç–∞ –¥–ª—è E501
    logger.error(
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è escape_md! –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º."
    )
    return str(text) if text is not None else ""


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —É—Ç–∏–ª–∏—Ç—É —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from utils.message_utils import escape_md
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∞–π–ª utils –Ω–µ —Å–æ–∑–¥–∞–Ω (–Ω–æ –ª—É—á—à–µ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å!)
    logging.basicConfig(level=logging.ERROR)  # Ensure basicConfig is called once
    # –°—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ —Ä–∞–∑–±–∏—Ç–∞ –¥–ª—è E501
    logging.error(
        "!!! –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å escape_md –∏–∑ utils.message_utils. "
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ !!!"
    )
    escape_md = _escape_md_fallback


logger = logging.getLogger(__name__)
# === END BLOCK 1 ===


# === BLOCK 2: Admin Check Helper ===
async def _is_admin(
    user_id: int, session_maker: typing.Optional[async_sessionmaker[AsyncSession]]
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    if not session_maker:
        logger.error("_is_admin: –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞.")
        return False
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º try-except –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ë–î
    try:
        async with session_maker() as session:
            user = await session.get(UserData, user_id)
            if user and user.is_admin:
                return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞ {user_id}: {e}", exc_info=True)
    return False


# === END BLOCK 2 ===


# === BLOCK 3: View Registration Codes ===
# --- –ö–û–ú–ê–ù–î–ê –ü–†–û–°–ú–û–¢–†–ê –ö–û–î–û–í ---
async def view_registration_codes(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–¥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    if not update or not update.effective_user:
        logger.warning("view_registration_codes –≤—ã–∑–≤–∞–Ω –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    user = update.effective_user
    user_id = user.id

    logger.info(f"–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É /view_reg_codes –≤—ã–∑–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    session_maker: typing.Optional[async_sessionmaker[AsyncSession]] = (
        context.bot_data.get("session_maker")
    )
    if not session_maker:
        logger.error(
            f"view_registration_codes: –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user {user_id}."
        )
        try:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
        except Exception as e:
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ë–î –≤ "
                f"view_registration_codes: {e}"
            )
        return
    if not await _is_admin(user_id, session_maker):
        logger.warning(f"/view_reg_codes: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω.")
        try:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
        except Exception as e:
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∞–≤–∞—Ö –≤ "
                f"view_registration_codes: {e}"
            )
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–¥–º–∏–Ω. –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–æ–¥—ã...")
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ UP006: typing.List -> list
    all_codes: list[RegistrationCodes] = []
    try:
        async with session_maker() as session:
            stmt = select(RegistrationCodes).order_by(RegistrationCodes.created_at)
            result = await session.execute(stmt)
            all_codes = result.scalars().all()
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≥. –∫–æ–¥–æ–≤ –∞–¥–º–∏–Ω–æ–º {user_id}: {e}", exc_info=True
        )
        try:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤.")
        except Exception as e2:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤: {e2}"
            )
        return

    if not all_codes:
        try:
            await update.message.reply_text(
                "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–∫–æ–¥–æ–≤ –Ω–µ—Ç': {e}")
        return

    reply_parts = ["üìã *–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤:*\n\n"]
    max_part_len = 4050  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç Telegram

    for code_obj in all_codes:
        status = "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if code_obj.is_used else "‚è≥ –î–æ—Å—Ç—É–ø–µ–Ω"
        user_info = ""
        if code_obj.is_used and code_obj.used_by_user_id:
            user_info = f" (User ID: {code_obj.used_by_user_id})"
            if code_obj.used_at:
                try:
                    used_at_str = escape_md(code_obj.used_at.strftime("%Y-%m-%d %H:%M"))
                except Exception:
                    used_at_str = "???"
                user_info += f" –≤ {used_at_str}"

        code_escaped = escape_md(code_obj.code)
        status_escaped = escape_md(status)
        user_info_escaped = (
            escape_md(user_info).replace(r"(", r"\(").replace(r")", r"\)")
        )

        line = f"`{code_escaped}` \\- {status_escaped}{user_info_escaped}\n"

        if len(reply_parts[-1]) + len(line) > max_part_len:
            reply_parts.append("")  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
        reply_parts[-1] += line

    try:  # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–µ–π
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ B007: i -> _i
        for _i, part in enumerate(reply_parts):
            if not part.strip():
                continue
            await update.message.reply_text(
                part, parse_mode=constants.ParseMode.MARKDOWN_V2
            )
    except Exception as send_err:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–¥–æ–≤ –∞–¥–º–∏–Ω—É {user_id}: {send_err}", exc_info=True
        )
        try:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤."
            )
        except Exception as e:
            # –°—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ —Ä–∞–∑–±–∏—Ç–∞ –¥–ª—è E501
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ "
                f"view_registration_codes: {e}"
            )

    logger.info(f"–ê–¥–º–∏–Ω—É {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(all_codes)} –∫–æ–¥–æ–≤.")


# === END BLOCK 3 ===


# === BLOCK 4: Ask for Codes File ===
# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–ê–°–°–û–í–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–û–î–û–í ---
async def ask_for_codes_file(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ txt —Ñ–∞–π–ª —Å –∫–æ–¥–∞–º–∏."""
    if not update or not update.effective_user:
        return
    user_id = update.effective_user.id

    logger.info(f"–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É /add_reg_codes_file –≤—ã–∑–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    session_maker: typing.Optional[async_sessionmaker[AsyncSession]] = (
        context.bot_data.get("session_maker")
    )
    if not session_maker:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ë–î.")
        return
    if not await _is_admin(user_id, session_maker):
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    message_text = escape_md(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ `.txt` —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
        "–ö–∞–∂–¥—ã–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.\n"
        "–ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞–∑–µ.\n"
        "–ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã."
    )
    try:
        await update.message.reply_text(
            message_text, parse_mode=constants.ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Ñ–∞–π–ª —Å –∫–æ–¥–∞–º–∏ —É –∞–¥–º–∏–Ω–∞ {user_id}")
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ txt —Ñ–∞–π–ª–∞ –∫–æ–¥–æ–≤ –∞–¥–º–∏–Ω—É {user_id}: {e}",
            exc_info=True,
        )
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await update.message.reply_text(message_text.replace("\\", ""))


# === END BLOCK 4 ===


# === BLOCK 5: Handle Codes File ===
async def handle_codes_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π .txt —Ñ–∞–π–ª —Å –∫–æ–¥–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    if (
        not update
        or not update.message
        or not update.message.document
        or not update.effective_user
    ):
        return
    user = update.effective_user
    message = update.message
    doc = message.document
    user_id = user.id

    if doc.mime_type != "text/plain":
        logger.debug(f"–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ txt —Ñ–∞–π–ª –æ—Ç {user_id}: {doc.file_name}")
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω txt —Ñ–∞–π–ª {doc.file_name} –æ—Ç {user_id}.")
    session_maker: typing.Optional[async_sessionmaker[AsyncSession]] = (
        context.bot_data.get("session_maker")
    )
    if not session_maker:
        await message.reply_text("–û—à–∏–±–∫–∞ –ë–î.")
        return
    if not await _is_admin(user_id, session_maker):
        logger.warning(f"–ù–µ-–∞–¥–º–∏–Ω {user_id} –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª —Å –∫–æ–¥–∞–º–∏.")
        return

    file_content_str = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try:  # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        file = await doc.get_file()
        file_content_bytes = await file.download_as_bytearray()
        try:
            file_content_str = file_content_bytes.decode("utf-8")
        except UnicodeDecodeError:
            file_content_str = file_content_bytes.decode("cp1251")
            logger.warning(f"–§–∞–π–ª {doc.file_name} –±—ã–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ cp1251.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–¥–æ–≤: {e}", exc_info=True)
        await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å/–ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤
    lines = file_content_str.splitlines()
    potential_codes_raw = {line.strip() for line in lines if line.strip()}
    added_count = 0

    if not potential_codes_raw:
        await message.reply_text("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.")
        return

    total_lines = len(lines)
    codes_in_file = len(potential_codes_raw)
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ E741: l -> line
    initial_non_empty_lines = [line.strip() for line in lines if line.strip()]
    duplicates_in_file = len(initial_non_empty_lines) - codes_in_file
    invalid_format = set()
    existing_in_db = set()
    valid_for_insert = set()
    error_message = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç—á–µ—Ç–∞

    try:  # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ SIM117: –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã with
        async with session_maker() as session, session.begin():
            codes_to_check_db = set()
            for code in potential_codes_raw:
                if 5 <= len(code) <= 40 and " " not in code:
                    codes_to_check_db.add(code)
                else:
                    invalid_format.add(code)
            if invalid_format:
                logger.warning(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {invalid_format}")

            if codes_to_check_db:
                stmt = select(RegistrationCodes.code).where(
                    RegistrationCodes.code.in_(codes_to_check_db)
                )
                result = await session.execute(stmt)
                existing_in_db = set(result.scalars().all())
                if existing_in_db:
                    logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–¥—ã: {existing_in_db}")

            valid_for_insert = codes_to_check_db - existing_in_db

            if valid_for_insert:
                new_codes_objs = [
                    RegistrationCodes(code=code, is_used=False)
                    for code in valid_for_insert
                ]
                session.add_all(new_codes_objs)
                await session.flush()
                added_count = len(valid_for_insert)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã {added_count} –∫–æ–¥–æ–≤.")
            else:
                logger.info("–ù–æ–≤—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    # –õ–æ–≤–∏–º –û–®–ò–ë–ö–£ –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –æ—Ç–¥–µ–ª—å–Ω–æ
    except SQLAlchemyIntegrityError as e:
        error_message = "–û—à–∏–±–∫–∞ –ë–î (IntegrityError). –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω?"
        # –°—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ —Ä–∞–∑–±–∏—Ç–∞ –¥–ª—è E501
        logger.error(
            f"–û—à–∏–±–∫–∞ –ë–î IntegrityError –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–æ–≤: {e}", exc_info=True
        )
    except SQLAlchemyError as e:
        error_message = "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–æ–≤."
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–æ–≤: {e}", exc_info=True)
    except Exception as e:
        error_message = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–æ–≤: {e}", exc_info=True)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
    report_parts = [
        f"üìù *–û—Ç—á–µ—Ç –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞* `{escape_md(doc.file_name)}`\n\n"
    ]
    report_parts.append(f"\\- –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {escape_md(total_lines)}\n")
    report_parts.append(f"\\- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–µ–ø—É—Å—Ç—ã—Ö –∫–æ–¥–æ–≤: {escape_md(codes_in_file)}\n")
    if duplicates_in_file > 0:
        report_parts.append(
            f"\\- –î—É–±–ª–∏–∫–∞—Ç–æ–≤/–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ \\(–ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ\\): "
            f"{escape_md(duplicates_in_file)}\n"
        )
    if invalid_format:
        report_parts.append(
            f"\\- –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç \\(–ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ\\): "
            f"{escape_md(len(invalid_format))}\n"
        )
    if existing_in_db:
        report_parts.append(
            f"\\- –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î \\(–ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ\\): "
            f"{escape_md(len(existing_in_db))}\n"
        )
    report_parts.append("\\-\\-\n")  # –ò—Å–ø–æ–ª–ª—å–∑—É–µ–º \\- –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if error_message:
        report_parts.append(f"‚ùå *–û–®–ò–ë–ö–ê:* {escape_md(error_message)}\n")
    report_parts.append(f"‚úÖ *–£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–û –ù–û–í–´–•:* {escape_md(added_count)}\n")

    # –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ final_report_messages
    final_report_messages = []
    current_report_text = "".join(report_parts)
    max_part_len = 4050
    lines_in_report = current_report_text.split("\n")
    part_buffer = ""
    for line in lines_in_report:
        line_with_newline = line + "\n"
        if len(part_buffer) + len(line_with_newline) > max_part_len:
            if part_buffer:
                final_report_messages.append(part_buffer)
            part_buffer = (
                line_with_newline
                if len(line_with_newline) <= max_part_len
                else (line[: max_part_len - 5] + "...\\n")
            )
        else:
            part_buffer += line_with_newline
    if part_buffer:
        final_report_messages.append(part_buffer)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ B007: i -> _i
        for _i, part in enumerate(final_report_messages):
            if not part.strip():
                continue
            await message.reply_text(part, parse_mode=constants.ParseMode.MARKDOWN_V2)
    except Exception as send_err:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {user_id}: {send_err}", exc_info=True
        )
        plain_fallback_text = (
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {doc.file_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ:{added_count}. –û—à–∏–±–∫–∞:{error_message or '–ù–µ—Ç'}"
        )
        await message.reply_text(plain_fallback_text)


# === END BLOCK 5 ===


# === BLOCK 6: View Instructions ===
async def view_instructions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."""
    if not update or not update.effective_user:
        return
    user_id = update.effective_user.id
    session_maker = context.bot_data.get("session_maker")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ F821
    if not session_maker:
        logger.error("view_instructions: –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î.")
        return

    if not await _is_admin(user_id, session_maker):
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–¥–º–∏–Ω. –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...")
    all_instructions: list[Instructions] = []
    try:  # –ó–∞–ø—Ä–æ—Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏–∑ –ë–î
        async with session_maker() as session:
            stmt = select(Instructions).order_by(Instructions.key)
            result = await session.execute(stmt)
            all_instructions = result.scalars().all()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")
        return

    if not all_instructions:
        await update.message.reply_text("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
    reply_parts = ["üìã *–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è AI:*\n\n"]
    max_part_len = 4050
    for instr in all_instructions:
        key_escaped = escape_md(instr.key)
        desc_escaped = (
            escape_md(instr.description) if instr.description else "_–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è_"
        )
        instr_text_lines = [f"*Key:* `{key_escaped}`", f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {desc_escaped}"]

        text_en_short = escape_md(
            instr.text_en[:150] + "..."
            if instr.text_en and len(instr.text_en) > 150
            else instr.text_en
        )
        text_ru_short = escape_md(
            instr.text_ru[:150] + "..."
            if instr.text_ru and len(instr.text_ru) > 150
            else instr.text_ru
        )
        instr_text_lines.append(f"üá¨üáß EN: {text_en_short or '_–ø—É—Å—Ç–æ_'}")
        instr_text_lines.append(f"üá∑üá∫ RU: {text_ru_short or '_–ø—É—Å—Ç–æ_'}")

        # –°—Ç—Ä–æ–∫–∞ —Ä–∞–∑–±–∏—Ç–∞ –¥–ª—è E501
        other_langs_present = any(
            getattr(instr, f"text_{lang}", None)
            for lang in [
                "es",
                "fr",
                "de",
                "uk",
                "pl",
                "ro",
                "ar",
                "tr",
                "fa",
                "pt",
                "hi",
                "uz",
            ]
        )
        if other_langs_present:
            instr_text_lines.append("_\\(–µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏\\)_")

        instr_text_lines.append("\\-\\-\\-\n")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        current_instr_block = "\n".join(instr_text_lines)

        if len(reply_parts[-1]) + len(current_instr_block) > max_part_len:
            reply_parts.append("")
        reply_parts[-1] += current_instr_block

    try:  # –û—Ç–ø—Ä–∞–≤–∫–∞
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ B007: i -> _i
        for _i, part in enumerate(reply_parts):
            if not part.strip():
                continue
            await update.message.reply_text(
                part, parse_mode=constants.ParseMode.MARKDOWN_V2
            )
    except Exception as send_err:
        # –°—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ —Ä–∞–∑–±–∏—Ç–∞ –¥–ª—è E501
        logger.error(
            "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–¥–º–∏–Ω—É " f"{user_id}: {send_err}",
            exc_info=True,
        )
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.")


# === END BLOCK 6 ===


# === BLOCK 7: Upload Instructions ===
async def ask_for_instructions_file(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ CSV —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏."""
    if not update or not update.effective_user:
        return
    user_id = update.effective_user.id
    session_maker = context.bot_data.get("session_maker")
    if not session_maker:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ë–î.")
        return

    if not await _is_admin(user_id, session_maker):
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    required_cols = escape_md("`key`, `text_en`, `text_ru`")
    optional_cols = escape_md("`description`, `text_es`, `text_fr`, `...`")
    message_parts = [
        escape_md("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ `.csv` —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è AI."),
        "",
        escape_md("*–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:*"),
        escape_md("- –ö–æ–¥–∏—Ä–æ–≤–∫–∞: `UTF-8` (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ `Windows-1251`"),
        escape_md("- –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –∑–∞–ø—è—Ç–∞—è (`,`)"),
        escape_md("- –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ–¥–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è."),
        escape_md("- –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫."),
        "",
        escape_md("*–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:*"),
        f"\\- {required_cols}",
        "",
        escape_md("*–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:*"),
        f"\\- {optional_cols}",
        "",
        escape_md("*–ü–æ–≤–µ–¥–µ–Ω–∏–µ:*"),
        escape_md("- –ï—Å–ª–∏ `key` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—É–¥–µ—Ç *–æ–±–Ω–æ–≤–ª–µ–Ω–∞*."),
        escape_md("- –ï—Å–ª–∏ `key` –Ω–æ–≤—ã–π, –±—É–¥–µ—Ç *–¥–æ–±–∞–≤–ª–µ–Ω–∞* –Ω–æ–≤–∞—è."),
    ]
    message_text = "\n".join(message_parts)
    try:  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await update.message.reply_text(
            message_text, parse_mode=constants.ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ó–∞–ø—Ä–æ—Å–∏–ª–∏ CSV —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —É –∞–¥–º–∏–Ω–∞ {user_id}")
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ CSV —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω—É {user_id}: {e}", exc_info=True
        )
        plain_text = message_text.replace("\\", "").replace("`", "").replace("*", "")
        await update.message.reply_text(plain_text)


async def handle_instructions_file(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π .csv —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏."""
    # === –ù–ê–ß–ê–õ–û –ó–ê–ì–õ–£–®–ö–ò ===
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å CSV
    if (
        not update
        or not update.message
        or not update.message.document
        or not update.effective_user
    ):
        return

    user = update.effective_user
    message = update.message
    doc = message.document
    user_id = user.id  # –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–ø–µ—Ä—å –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ F841

    session_maker = context.bot_data.get("session_maker")
    if not session_maker:
        await message.reply_text("–û—à–∏–±–∫–∞ –ë–î.")
        return
    if not await _is_admin(user_id, session_maker):
        logger.warning(f"–ù–µ-–∞–¥–º–∏–Ω {user_id} –ø—Ä–∏—Å–ª–∞–ª CSV —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")
        return
    # –°—Ç—Ä–æ–∫–∞ —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–±–∏—Ç–∞ –¥–ª—è E501
    if doc.mime_type not in (
        "text/csv",
        "text/comma-separated-values",
        "application/csv",
    ):
        logger.debug(f"–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ-CSV —Ñ–∞–π–ª: {doc.file_name} –æ—Ç {user_id}")
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv")
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω CSV —Ñ–∞–π–ª {doc.file_name} –æ—Ç {user_id}. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    # --- –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ ---
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ CSV, –≤–∞–ª–∏–¥–∞—Ü–∏—é, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    await asyncio.sleep(1.0)  # –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–ª–≥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    added_count = 0  # –ü—Ä–∏–º–µ—Ä
    updated_count = 0  # –ü—Ä–∏–º–µ—Ä
    processed_rows = 0  # –ü—Ä–∏–º–µ—Ä
    error_rows_info = []  # –ü—Ä–∏–º–µ—Ä
    error_message = "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω."  # –ü—Ä–∏–º–µ—Ä
    # --- –ö–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–≥–ª—É—à–∫–∏ ---

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    try:
        from utils.message_utils import escape_md
    except ImportError:
        escape_md = _escape_md_fallback

    report_header = (
        f"üìù *–û—Ç—á–µ—Ç –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π* `{escape_md(doc.file_name)}`\n\n"
    )
    report_body = ""
    if error_message:
        report_body += (
            f"‚ùå *–û–®–ò–ë–ö–ê/–ò–ù–§–û:* {escape_md(error_message)}\n"  # –ò–∑–º–µ–Ω–∏–ª –Ω–∞ –û–®–ò–ë–ö–ê/–ò–ù–§–û
        )
    else:
        # –≠—Ç–∞ —á–∞—Å—Ç—å –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–∑-–∑–∞ –∑–∞–≥–ª—É—à–∫–∏
        report_body += f"\\- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {processed_rows}\n"
        report_body += f"\\- –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {added_count}\n"
        report_body += f"\\- –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated_count}\n"
        if error_rows_info:
            report_body += f"\\- –û—à–∏–±–æ–∫ –≤ —Å—Ç—Ä–æ–∫–∞—Ö: {len(error_rows_info)}\n"

    full_report = report_header + report_body

    # –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ final_report_messages
    final_report_messages = []
    max_part_len = 4050
    lines_in_report = full_report.split("\n")
    part_buffer = ""
    for line in lines_in_report:
        line_with_newline = line + "\n"
        if len(part_buffer) + len(line_with_newline) > max_part_len:
            if part_buffer:
                final_report_messages.append(part_buffer)
            part_buffer = (
                line_with_newline
                if len(line_with_newline) <= max_part_len
                else (line[: max_part_len - 5] + "...\\n")
            )
        else:
            part_buffer += line_with_newline
    if part_buffer:
        final_report_messages.append(part_buffer)

    try:  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
        for _i, part in enumerate(final_report_messages):
            if not part.strip():
                continue
            await update.message.reply_text(
                part, parse_mode=constants.ParseMode.MARKDOWN_V2
            )
    except Exception as send_err:  # Fallback
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê (–±—ã–ª–∞ ~652, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —á—É—Ç—å —Å–º–µ—Å—Ç–∏—Ç—å—Å—è) ---
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∞–¥–º–∏–Ω—É {user_id}: {send_err}",
            exc_info=True,
        )  # noqa: E501
        # -------------------------------------------------------------------
        plain_fallback_text = (
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {doc.file_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}, "
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}. –û—à–∏–±–æ–∫ —Å—Ç—Ä–æ–∫: {len(error_rows_info)}. "
            f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {error_message or '–ù–µ—Ç'}"
        )
        await update.message.reply_text(plain_fallback_text)


# === END BLOCK 7 ===


# === BLOCK 8: Upload/Manage Scenarios ===
# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–∞–∑–±–∏—Ç –¥–ª—è E501
# (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ –ø–æ–ª–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º)
async def ask_for_scenario_file(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ YAML —Ñ–∞–π–ª —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º."""
    if not update or not update.effective_user:
        return
    user_id = update.effective_user.id
    logger.info(f"–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É /upload_scenario –≤—ã–∑–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    session_maker: typing.Optional[async_sessionmaker[AsyncSession]] = (
        context.bot_data.get("session_maker")
    )
    if not session_maker:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ë–î.")
        return
    if not await _is_admin(user_id, session_maker):
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    try:
        from utils.message_utils import escape_md
    except ImportError:
        escape_md = _escape_md_fallback  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∑–∞–≥–ª—É—à–∫—É

    line1 = escape_md(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ `.yaml` —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ "
        "—Å—Ü–µ–Ω–∞—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞."
    )
    line2 = ""
    line3 = escape_md("*–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ YAML –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞:*")
    yaml_example = """```yaml
scenario_key: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π_–∫–ª—é—á_—Å—Ü–µ–Ω–∞—Ä–∏—è
name: "–ü–æ–Ω—è—Ç–Ω–æ–µ –ù–∞–∑–≤–∞–Ω–∏–µ –°—Ü–µ–Ω–∞—Ä–∏—è"
entry_state: –ù–ê–ó–í–ê–ù–ò–ï_–ü–ï–†–í–û–ì–û_–°–û–°–¢–û–Ø–ù–ò–Ø
states:
  –ù–ê–ó–í–ê–ù–ò–ï_–°–û–°–¢–û–Ø–ù–ò–Ø_1:
    description: "–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    on_entry: [...]
    input_handlers: [...]
  –ù–ê–ó–í–ê–ù–ò–ï_–°–û–°–¢–û–Ø–ù–ò–Ø_2:
    # ...
```"""
    line4 = ""
    line5 = escape_md("*–ü–æ–≤–µ–¥–µ–Ω–∏–µ:*")
    line6 = escape_md(
        "- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å —Ç–µ–º –∂–µ `scenario_key` –±—É–¥–µ—Ç **–æ–±–Ω–æ–≤–ª–µ–Ω** "
        "(–≤–µ—Ä—Å–∏—è —É–≤–µ–ª–∏—á–∏—Ç—Å—è)."
    )
    line7 = escape_md("- –ù–æ–≤—ã–π `scenario_key` –±—É–¥–µ—Ç **–¥–æ–±–∞–≤–ª–µ–Ω**.")
    line8 = escape_md(
        "- YAML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å **–≤–∞–ª–∏–¥–Ω—ã–º** –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å `scenario_key`, "
        "`name`, `entry_state`, `states`."
    )
    message_parts = [
        line1,
        line2,
        line3,
        yaml_example,
        line4,
        line5,
        line6,
        line7,
        line8,
    ]
    message_text = "\n".join(message_parts)

    try:
        await update.message.reply_text(
            message_text, parse_mode=constants.ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ó–∞–ø—Ä–æ—Å–∏–ª–∏ YAML —Ñ–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏—è —É –∞–¥–º–∏–Ω–∞ {user_id}")
    except Exception as e:  # Fallback
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ YAML —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω—É {user_id}: {e}", exc_info=True
        )
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ E741: l -> line
        plain_text = "\n".join(
            [line for line in message_parts if not line.startswith("```")]
        ).replace("\\", "")
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. "
            f"–û—à–∏–±–∫–∞: {e}\n\n{plain_text}"
        )


async def handle_scenario_file(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π .yaml —Ñ–∞–π–ª —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º, –¥–æ–±–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤ –ë–î."""
    if (
        not update
        or not update.message
        or not update.message.document
        or not update.effective_user
    ):
        return
    user = update.effective_user
    message = update.message
    doc = message.document
    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    session_maker: typing.Optional[async_sessionmaker[AsyncSession]] = (
        context.bot_data.get("session_maker")
    )
    if not session_maker:
        await message.reply_text("–û—à–∏–±–∫–∞ –ë–î.")
        return
    if not await _is_admin(user_id, session_maker):
        logger.warning(f"–ù–µ-–∞–¥–º–∏–Ω {user_id} –ø—Ä–∏—Å–ª–∞–ª YAML —Ñ–∞–π–ª.")
        return
    if not doc.file_name.lower().endswith((".yaml", ".yml")):
        logger.debug(f"–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ-YAML —Ñ–∞–π–ª: {doc.file_name} –æ—Ç {user_id}")
        await message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .yaml –∏–ª–∏ .yml"
        )
        return

    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω YAML —Ñ–∞–π–ª {doc.file_name} –æ—Ç {user_id}. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É..."
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
    file_content_str: typing.Optional[str] = None
    scenario_data: typing.Optional[dict] = None
    added_count = 0
    updated_count = 0
    error_message = None
    processed_key = "N/A"
    new_version = 0
    existing_scenario_version = 0  # –î–ª—è –æ—Ç—á–µ—Ç–∞

    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        file = await doc.get_file()
        file_content_bytes = await file.download_as_bytearray()
        try:
            file_content_str = file_content_bytes.decode("utf-8")
        except UnicodeDecodeError as err:
            raise ValueError("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.") from err
        logger.info(f"–§–∞–π–ª {doc.file_name} —Å–∫–∞—á–∞–Ω –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω.")

        # –ü–∞—Ä—Å–∏–Ω–≥ YAML
        scenario_data = yaml.safe_load(file_content_str)
        if not isinstance(scenario_data, dict):
            raise ValueError(
                "YAML –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å) –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ."
            )
        logger.info(f"–§–∞–π–ª {doc.file_name} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω.")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        required_keys = ["scenario_key", "name", "entry_state", "states"]
        missing = [key for key in required_keys if key not in scenario_data]
        if missing:
            raise ValueError(
                f"–í YAML –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏: {', '.join(missing)}"
            )
        if not isinstance(scenario_data["states"], dict) or not scenario_data["states"]:
            raise ValueError("–†–∞–∑–¥–µ–ª 'states' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º.")
        logger.info(
            f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ YAML –¥–ª—è —Ñ–∞–π–ª–∞ {doc.file_name} –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞."
        )

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        scenario_key = str(scenario_data["scenario_key"]).strip()
        name = str(scenario_data["name"]).strip()
        description = str(scenario_data.get("description", "")).strip() or None
        definition_yaml = yaml.dump(
            scenario_data, allow_unicode=True, sort_keys=False, default_flow_style=False
        )
        processed_key = scenario_key

        if not scenario_key or not name:
            raise ValueError("–ö–ª—é—á–∏ 'scenario_key' –∏ 'name' –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")

        # --- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ë–î ---
        logger.debug(f"–ü–æ–∏—Å–∫/–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/–í—Å—Ç–∞–≤–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_key}' –≤ –ë–î...")
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ —Å—Ç—Ä–æ–∫—É –≤—ã—à–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è E501
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π commit/rollback
        async with session_maker() as session, session.begin():
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            select_stmt = select(ConversationScenario).where(
                ConversationScenario.scenario_key == scenario_key
            )
            result = await session.execute(select_stmt)
            existing_scenario = result.scalar_one_or_none()

            if existing_scenario:  # –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞–π–¥–µ–Ω - –û–ë–ù–û–í–õ–Ø–ï–ú
                existing_scenario_version = existing_scenario.version
                new_version = existing_scenario_version + 1
                update_stmt = (
                    sqlalchemy_update(ConversationScenario)
                    .where(
                        ConversationScenario.scenario_id
                        == existing_scenario.scenario_id
                    )
                    .values(
                        name=name,
                        description=description,
                        definition=definition_yaml,
                        version=new_version,
                        # is_active –Ω–µ –º–µ–Ω—è–µ–º –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    )
                )
                await session.execute(update_stmt)
                updated_count = 1
                logger.info(
                    f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario_key}' –æ–±–Ω–æ–≤–ª–µ–Ω —Å "
                    f"v{existing_scenario_version} –¥–æ v{new_version}."
                )
            else:  # –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω - –î–û–ë–ê–í–õ–Ø–ï–ú
                new_version = 1
                new_scenario = ConversationScenario(
                    scenario_key=scenario_key,
                    name=name,
                    description=description,
                    definition=definition_yaml,
                    is_active=True,
                    version=new_version,
                )
                session.add(new_scenario)
                await session.flush()
                added_count = 1
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π '{scenario_key}' v{new_version}.")
        logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è —Å –ë–î –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_key}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ ---
    except (YAMLError, ValueError, SQLAlchemyError, UnicodeDecodeError) as e:
        error_message = f"{type(e).__name__}: {e}"
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {doc.file_name}: {error_message}", exc_info=True
        )
    except Exception as e:
        error_message = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {type(e).__name__}: {e}"
        logger.error(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {doc.file_name}: {error_message}",
            exc_info=True,
        )

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –ü–û–õ–ù–û–ì–û –û—Ç—á–µ—Ç–∞ ---
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º escape_md
        try:
            from utils.message_utils import escape_md
        except ImportError:
            escape_md = _escape_md_fallback
    except Exception as esc_err:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è escape_md: {esc_err}")
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ E731: –ò—Å–ø–æ–ª—å–∑—É–µ–º _escape_md_fallback –≤–º–µ—Å—Ç–æ lambda
        escape_md = _escape_md_fallback  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π fallback

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    escaped_filename = escape_md(doc.file_name)
    escaped_key = escape_md(processed_key)
    report_text = ""

    if error_message:
        escaped_error = escape_md(error_message)
        report_text = (
            f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞* `{escaped_filename}`:\n{escaped_error}"
        )
    else:
        report_text = (
            f"‚úÖ *–§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏—è* `{escaped_filename}` " f"*—É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\\.*\n\n"
        )
        if added_count > 0:
            escaped_version = escape_md(new_version)
            report_text += (
                f"\\- –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: `{escaped_key}` "
                f"\\(v{escaped_version}\\)\n"
            )
        if updated_count > 0:
            escaped_version = escape_md(new_version)
            report_text += (
                f"\\- –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: `{escaped_key}` "
                f"\\(–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: v{escaped_version}\\)\n"
            )
        if added_count == 0 and updated_count == 0 and not error_message:
            report_text += "\\_\\(–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ\\)_"

    plain_fallback_text = (
        f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {doc.file_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ:{added_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ:{updated_count}. "
        f"–û—à–∏–±–∫–∞:{error_message or '–ù–µ—Ç'}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞
    try:
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ü–û–õ–ù–´–ô –æ—Ç—á–µ—Ç: {report_text[:100]}...")
        await message.reply_text(
            report_text, parse_mode=constants.ParseMode.MARKDOWN_V2
        )
        logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è {doc.file_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except telegram.error.BadRequest as send_err:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ü–û–õ–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ (MarkdownV2): {send_err}", exc_info=True
        )
        await message.reply_text(plain_fallback_text)
    except Exception as send_err:
        logger.error(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ü–û–õ–ù–û–ì–û –æ—Ç—á–µ—Ç–∞: {send_err}", exc_info=True
        )
        await message.reply_text(plain_fallback_text)


# === END BLOCK 8 ===
